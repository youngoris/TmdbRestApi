from django.db import models

# defining a Django model class for IMDB entry
class IMDBEntry(models.Model):
    # unique identifier for an IMDB entry, using character field
    imdb_id = models.CharField(max_length=255, primary_key=True)

# defining a model for director information
class Director(models.Model):
    # unique identifier for a director
    director_id = models.CharField(max_length=100, primary_key=True)
    # director's name
    name = models.CharField(max_length=255)
    # director's birth year, can be null or left blank
    birth_year = models.IntegerField(null=True, blank=True)
    # director's death year, can also be null or left blank
    death_year = models.IntegerField(null=True, blank=True)
    # primary profession of the director
    primary_profession = models.CharField(max_length=255)
    # many-to-many relationship with IMDBEntry, representing titles known for
    known_for_titles = models.ManyToManyField(IMDBEntry)

    # string representation of a director, showing their name
    def __str__(self):
        return self.name

# model for actor information
class Actor(models.Model):
    # actor's name
    name = models.CharField(max_length=255)

    # string representation of an actor, showing their name
    def __str__(self):
        return self.name

# model for genre information
class Genre(models.Model):
    # unique identifier for a genre
    genre_id = models.IntegerField(primary_key=True)
    # name of the genre
    name = models.CharField(max_length=100)

    # string representation of a genre, showing its name
    def __str__(self):
        return self.name

# model for movie information
class Movies(models.Model):
    # unique identifier for a movie from TMDB
    tmdb_id = models.IntegerField(primary_key=True)
    # title of the movie
    title = models.CharField(max_length=255)
    # foreign key to IMDBEntry, cascade delete if IMDB entry is deleted
    imdb_id = models.ForeignKey(IMDBEntry, on_delete=models.CASCADE)
    # many-to-many relationship with Director
    directors = models.ManyToManyField(Director, related_name='movies')
    # many-to-many relationship with Actor
    casts = models.ManyToManyField(Actor)
    # many-to-many relationship with Genre
    genres = models.ManyToManyField(Genre)
    
    # average vote or rating for the movie
    vote_average = models.FloatField()
    # total number of votes the movie received
    vote_count = models.IntegerField()
    # release date of the movie
    release_date = models.CharField(max_length=50)
    # runtime of the movie in minutes
    runtime = models.IntegerField()
    # boolean field indicating if the movie is for adults
    adult = models.BooleanField()
    # total revenue generated by the movie
    revenue = models.BigIntegerField()
    # budget of the movie
    budget = models.BigIntegerField()
    # overview or summary of the movie
    overview = models.TextField()

    # string representation of a movie, showing its title
    def __str__(self):
        return self.title



    